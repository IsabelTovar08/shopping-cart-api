// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String
  role         String   @default("CUSTOMER") // ADMIN | CUSTOMER
  createdAt    DateTime @default(now())
  cart         Cart?
  orders       Order[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  sku         String      @unique
  description String?
  price       Decimal     @db.Decimal(10,2) 
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id         String     @id @default(uuid())
  userId     String     @unique
  total      Decimal    @db.Decimal(10,2) @default(0.00)
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  subtotal  Decimal  @db.Decimal(10,2) // precio * cantidad

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Decimal     @db.Decimal(10,2) 
  status    String      @default("PENDING")
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10,2) 
  subtotal  Decimal

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}